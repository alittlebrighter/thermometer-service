// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type TemperatureUnits uint16

// TemperatureUnits_TypeID is the unique identifier for the type TemperatureUnits.
const TemperatureUnits_TypeID = 0x8d9a65524642b34f

// Values of TemperatureUnits.
const (
	TemperatureUnits_celsius    TemperatureUnits = 0
	TemperatureUnits_fahrenheit TemperatureUnits = 1
)

// String returns the enum's constant name.
func (c TemperatureUnits) String() string {
	switch c {
	case TemperatureUnits_celsius:
		return "celsius"
	case TemperatureUnits_fahrenheit:
		return "fahrenheit"

	default:
		return ""
	}
}

// TemperatureUnitsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TemperatureUnitsFromString(c string) TemperatureUnits {
	switch c {
	case "celsius":
		return TemperatureUnits_celsius
	case "fahrenheit":
		return TemperatureUnits_fahrenheit

	default:
		return 0
	}
}

type TemperatureUnits_List struct{ capnp.List }

func NewTemperatureUnits_List(s *capnp.Segment, sz int32) (TemperatureUnits_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return TemperatureUnits_List{l.List}, err
}

func (l TemperatureUnits_List) At(i int) TemperatureUnits {
	ul := capnp.UInt16List{List: l.List}
	return TemperatureUnits(ul.At(i))
}

func (l TemperatureUnits_List) Set(i int, v TemperatureUnits) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type TemperatureRead struct{ capnp.Struct }
type TemperatureRead_reading TemperatureRead
type TemperatureRead_reading_Which uint16

const (
	TemperatureRead_reading_Which_value TemperatureRead_reading_Which = 0
	TemperatureRead_reading_Which_error TemperatureRead_reading_Which = 1
)

func (w TemperatureRead_reading_Which) String() string {
	const s = "valueerror"
	switch w {
	case TemperatureRead_reading_Which_value:
		return s[0:5]
	case TemperatureRead_reading_Which_error:
		return s[5:10]

	}
	return "TemperatureRead_reading_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TemperatureRead_TypeID is the unique identifier for the type TemperatureRead.
const TemperatureRead_TypeID = 0xdb7b1ecd4171b439

func NewTemperatureRead(s *capnp.Segment) (TemperatureRead, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return TemperatureRead{st}, err
}

func NewRootTemperatureRead(s *capnp.Segment) (TemperatureRead, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return TemperatureRead{st}, err
}

func ReadRootTemperatureRead(msg *capnp.Message) (TemperatureRead, error) {
	root, err := msg.RootPtr()
	return TemperatureRead{root.Struct()}, err
}

func (s TemperatureRead) String() string {
	str, _ := text.Marshal(0xdb7b1ecd4171b439, s.Struct)
	return str
}

func (s TemperatureRead) Units() TemperatureUnits {
	return TemperatureUnits(s.Struct.Uint16(0))
}

func (s TemperatureRead) SetUnits(v TemperatureUnits) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s TemperatureRead) Location() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s TemperatureRead) HasLocation() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TemperatureRead) LocationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s TemperatureRead) SetLocation(v string) error {
	return s.Struct.SetText(0, v)
}

func (s TemperatureRead) Reading() TemperatureRead_reading { return TemperatureRead_reading(s) }

func (s TemperatureRead_reading) Which() TemperatureRead_reading_Which {
	return TemperatureRead_reading_Which(s.Struct.Uint16(2))
}
func (s TemperatureRead_reading) Value() float64 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != value")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s TemperatureRead_reading) SetValue(v float64) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s TemperatureRead_reading) Error() (string, error) {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != error")
	}
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s TemperatureRead_reading) HasError() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TemperatureRead_reading) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s TemperatureRead_reading) SetError(v string) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetText(1, v)
}

// TemperatureRead_List is a list of TemperatureRead.
type TemperatureRead_List struct{ capnp.List }

// NewTemperatureRead creates a new list of TemperatureRead.
func NewTemperatureRead_List(s *capnp.Segment, sz int32) (TemperatureRead_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return TemperatureRead_List{l}, err
}

func (s TemperatureRead_List) At(i int) TemperatureRead { return TemperatureRead{s.List.Struct(i)} }

func (s TemperatureRead_List) Set(i int, v TemperatureRead) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TemperatureRead_List) String() string {
	str, _ := text.MarshalList(0xdb7b1ecd4171b439, s.List)
	return str
}

// TemperatureRead_Promise is a wrapper for a TemperatureRead promised by a client call.
type TemperatureRead_Promise struct{ *capnp.Pipeline }

func (p TemperatureRead_Promise) Struct() (TemperatureRead, error) {
	s, err := p.Pipeline.Struct()
	return TemperatureRead{s}, err
}

func (p TemperatureRead_Promise) Reading() TemperatureRead_reading_Promise {
	return TemperatureRead_reading_Promise{p.Pipeline}
}

// TemperatureRead_reading_Promise is a wrapper for a TemperatureRead_reading promised by a client call.
type TemperatureRead_reading_Promise struct{ *capnp.Pipeline }

func (p TemperatureRead_reading_Promise) Struct() (TemperatureRead_reading, error) {
	s, err := p.Pipeline.Struct()
	return TemperatureRead_reading{s}, err
}

const schema_c54e847d37419a66 = "x\xda\x8c\x90\xcf\xea\x12Q\x1c\xc5\xcf\xb9w&-\x07" +
	"\xec\x92-\x84\xcaMA.\xb2\xac@j\xa5BQ\"" +
	"\xd5\x15\xdd\xb4\x1b\xf4\x9a\x03\xe3\x8c\xcd\x9fZ\x84HP" +
	"\x9b\xa2E\x8b\x16\x09=C\x8b|\x85\x96=A\xeb\x9e" +
	"\xa1]7&\xaai\xd7o\xfb\xe1\xfb=|\xce9\xf9" +
	"\xba/\xban\x9d\x80\xf6\xdcc\xf6\xfe\xa7\xe1\xed\x89\xd9" +
	"\xbf\x81j\x0a\xbb\xdc\x0fz\xdb\x17\xf7>\x03\xec\xae'" +
	"T\xcf+\x80\xda\xf6@{\xe3\xf0x\xf0\xe5\xdc\xb3\xaf" +
	"\xd0M\xfes\xe7\x8a\x0a\xd0}9\xa2z_\x9c\xbe\xfb" +
	"\x08\xda\xb7\xe3\x13\xd9\x87\xef\x87o\xd0m\x8a\xf2q&" +
	"*\x14\xe4\xb5\xd3|E\xf0\xd4\x05>\x05\xed:^\x98" +
	"0\xbd\x9c9f\xbd1\x89\x9f\xe5\x89\xe9\xcc\xfdM\xb4" +
	"\xb99-\xc9,\x0a2\xa6\x0fH]\xa5\x00\x94\x1a\x02" +
	"\xa4:\xfe\x10\xd8\xcdM\x98\x06yj\x97\xfe*1\xd1" +
	"\xca@\x06\xd9\xd1R'\xc6_\x00E\xaa'\x1d\xc0!" +
	"\xa0n]\x05t_R\x8f\x05\xc9\x06\x0bvw\x04\xe8" +
	";\x92z*X\x14(\xfb)=\x84h\xe5Q\x90\xa5" +
	"\xac\x97C\x82\xac\x836\x8c\xe7~\x16\xc4\x11\x00z\x10" +
	"\xf4\xc0]b\xfcE\x10=\xfa+\xe8\xfeO\xb0\xf3\xfb" +
	"\x03\xd0U\xe9\x9c\xb1\x96\x8d_\x13\xb4\x0b\xd1\xf3\x92\xfa" +
	"\x8a\xe0Y\xfe(\xb0\x04\xd4\xa5\x02_\x94\xd4\xd7\x05[" +
	"O\xfc07\xacA\xb0\x06\xb6L\x92\xc4\xc9\x1f\x91\x9f" +
	"\x01\x00\x00\xff\xff\xa0Y\x8c\xe1"

func init() {
	schemas.Register(schema_c54e847d37419a66,
		0x8d9a65524642b34f,
		0xdb7b1ecd4171b439,
		0xe5b4f79d740a4c91)
}
